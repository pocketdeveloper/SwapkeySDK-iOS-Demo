//
//  MessagesViewController.m
//  DemoiMessage
//
//  Created by Carolina Franco on 4/5/20.
//  Copyright Â© 2020 Carolina Franco. All rights reserved.
//

#import "MessagesViewController.h"


@interface MessagesViewController ()
@property (nonatomic, strong) SwapkeyMessagesMain *handler;
@end

@implementation MessagesViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    
    SKEPreferences *pref = [SKEPreferences getCurrentPreferences];
    if (pref != nil)
    {
        pref.bundleGroup = @"group.SKE.Test";
        pref.selfUrlToOpen = @"swap://";
        pref.variableToStoreDeviceID = @"deviceID";
        pref.maxAttempsToPay = 3;
        pref.shouldShowSendKeyboard = YES;
        pref.notAllowedHosts = [[NSArray alloc] init];
        
        if ([Swapkey initializeWithKey:@"coppel" isDevelopment:YES andPreferences:pref])
        {
            BOOL enabled = [Swapkey enableDebugging];
        }
    }
    self.handler = [[SwapkeyMessagesMain alloc] initWithHandler:self];
}

#pragma mark - Conversation Handling

-(void)willBecomeActiveWithConversation:(MSConversation *)conversation {
    [self.handler skWillBecomeActive];
}

-(void)didBecomeActiveWithConversation:(MSConversation *)conversation {
    [self.handler skDidBecomeActive];
}

-(void)willResignActiveWithConversation:(MSConversation *)conversation {
    // Called when the extension is about to move from the active to inactive state.
    // This will happen when the user dissmises the extension, changes to a different
    // conversation or quits Messages.
    
    // Use this method to release shared resources, save user data, invalidate timers,
    // and store enough state information to restore your extension to its current state
    // in case it is terminated later.
}

-(void)didReceiveMessage:(MSMessage *)message conversation:(MSConversation *)conversation {
    // Called when a message arrives that was generated by another instance of this
    // extension on a remote device.
    
    // Use this method to trigger UI updates in response to the message.
}

-(void)didStartSendingMessage:(MSMessage *)message conversation:(MSConversation *)conversation {
    // Called when the user taps the send button.
}

-(void)didCancelSendingMessage:(MSMessage *)message conversation:(MSConversation *)conversation {
    // Called when the user deletes the message without sending it.
    
    // Use this to clean up state related to the deleted message.
}

-(void)willTransitionToPresentationStyle:(MSMessagesAppPresentationStyle)presentationStyle {
    [self.handler skWillTransitionTo:presentationStyle];
}

-(void)didTransitionToPresentationStyle:(MSMessagesAppPresentationStyle)presentationStyle {
    [self.handler skDidTransitionTo:presentationStyle];
}

@end
